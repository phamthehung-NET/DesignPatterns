Bridge is used to split the dependencies between abstraction and implementation to 2 specific parts for easier expansion.

Advantages:
* Can create a independent platform classes and apps.
* The client code works with high-level abstractions. It isn’t exposed to the platform details.
* Open/Closed Principle. You can introduce new abstractions and implementations independently from each other.
* Single Responsibility Principle. You can focus on high-level logic in the abstraction and on platform details in the implementation.

Disadvantages:
* Might make the code more complicated by applying the pattern to a highly cohesive class.
